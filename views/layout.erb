<!DOCTYPE html>
<html>

<head>
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
    <title>Noll</title>

    <style>
        body {
          font: 11px sans-serif;
        }

        .axis path,
        .axis line {
          fill: none;
          stroke: #000;
          shape-rendering: crispEdges;
        }

        .dot {
          stroke: #000;
        }

        .tooltip {
          position: absolute;
          width: 200px;
          height: 28px;
          pointer-events: none;
        }
    </style>
</head>
<div>
    <body>
        <h1><strong>Wind Chills</strong></h1>

        <form method="post" action="/temps">
          <div>
              <input type="submit" value="Update" class="button">
          </div>
        </form>
        <%=yield %>
    </body>
</div>
<body>
    <svg id="visualisation" width="1000" height="500"></svg>
    <script>

      var temps = [{rec_time: '2011', temp: 44}, {rec_time: '2012', temp: 40}, {rec_time: '2013', temp: 22}]

      var yqlCallback = function(data) {
        var wind = data.query.results.channel.wind;
        var current_time = new Date();
        var split_time = current_time.getTime();
        var minutes = 1000 * 60;
        var hours = minutes * 60;
        var days = hours * 24;
        var years = days * 365;
        var d = new Date();
        var t = d.getTime();
        var y = Math.round(t / years);

        var formatted_time = y
        console.log(formatted_time);
        temps.push({rec_time: 4, temp: wind.chill});
        // console.log(wind.chill);
        // console.log(data);
      };

        var data = temps;

//SCATTER PLOT
var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

/*
 * value accessor - returns the value to encode for a given data object.
 * scale - maps value to a visual display encoding, such as a pixel position.
 * map function - maps from data value to display value
 * axis - sets up axis
 */

// setup x
var xValue = function(d) { return d.Calories;}, // data -> value
    xScale = d3.scale.linear().range([0, width]), // value -> display
    xMap = function(d) { return xScale(xValue(d));}, // data -> display
    xAxis = d3.svg.axis().scale(xScale).orient("bottom");

// setup y
var yValue = function(d) { return d["Protein (g)"];}, // data -> value
    yScale = d3.scale.linear().range([height, 0]), // value -> display
    yMap = function(d) { return yScale(yValue(d));}, // data -> display
    yAxis = d3.svg.axis().scale(yScale).orient("left");

// setup fill color
var cValue = function(d) { return d.Manufacturer;},
    color = d3.scale.category10();

// add the graph canvas to the body of the webpage
var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// add the tooltip area to the webpage
var tooltip = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);



    data.forEach(function(d) {
    d.Calories = +d.Calories;
    d["Protein (g)"] = +d["Protein (g)"];
//    console.log(d);
  });
// don't want dots overlapping axis, so add in buffer to data domain
  xScale.domain([d3.min(data, xValue)-1, d3.max(data, xValue)+1]);
  yScale.domain([d3.min(data, yValue)-1, d3.max(data, yValue)+1]);

  // x-axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
    .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -6)
      .style("text-anchor", "end")
      .text("Calories");

  // y-axis
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Protein (g)");

  // draw dots
  svg.selectAll(".dot")
      .data(data)
    .enter().append("circle")
      .attr("class", "dot")
      .attr("r", 3.5)
      .attr("cx", xMap)
      .attr("cy", yMap)
      .style("fill", function(d) { return color(cValue(d));})
      .on("mouseover", function(d) {
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html(d["Cereal Name"] + "<br/> (" + xValue(d)
            + ", " + yValue(d) + ")")
               .style("left", (d3.event.pageX + 5) + "px")
               .style("top", (d3.event.pageY - 28) + "px");
      })
      .on("mouseout", function(d) {
          tooltip.transition()
               .duration(500)
               .style("opacity", 0);
      });

  // draw legend
  var legend = svg.selectAll(".legend")
      .data(color.domain())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  // draw legend colored rectangles
  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

  // draw legend text
  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d;});

// LINE GRAPH
// var vis = d3.select('#visualisation'),
//     WIDTH = 500,
//     HEIGHT = 500,
//     MARGINS = {
//       top: 20,
//       right: 20,
//       bottom: 20,
//       left: 50
//     },
//     xRange = d3.scale.linear().range([MARGINS.left, WIDTH - MARGINS.right]).domain([d3.min(data, function(d) {
//       return d.rec_time;
//     }), d3.max(data, function(d) {
//       return d.rec_time;
//     })]),
//     yRange = d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([d3.min(data, function(d) {
//       return d.temp;
//     }), d3.max(data, function(d) {
//       return d.temp;
//     })]),
//     xAxis = d3.svg.axis()
//       .scale(xRange)
//       .tickSize(5)
//       // .tickSubdivide(true)
//     yAxis = d3.svg.axis()
//       .scale(yRange)
//       .tickSize(5)
//       .orient('left')
//       .tickSubdivide(true);

// vis.append('svg:g')
//   .attr('class', 'x axis')
//   .attr('transform', 'translate(0,' + (HEIGHT - MARGINS.bottom) + ')')
//   .call(xAxis);

// vis.append('svg:g')
//   .attr('class', 'y axis')
//   .attr('transform', 'translate(' + (MARGINS.left) + ',0)')
//   .call(yAxis);

// vis.append('text')
//     .attr("class", "x label")
//     .attr("text-anchor", "end")
//     .attr("x", data.length)
//     .attr("y", data.length)
//     .text("years");

// vis.append("text")
//     .attr("class", "y label")
//     .attr("text-anchor", "end")
//     .attr("y", 6)
//     .attr("dy", ".75em")
//     .attr("transform", "rotate(-90)")
//     .text("wind chill");

// var lineFunc = d3.svg.line()
//   .x(function(d) {
//     return xRange(d.rec_time);
//   })
//   .y(function(d) {
//     return yRange(d.temp);
//   })
//   .interpolate('linear');

//   vis.append('svg:path')
//   .attr('d', lineFunc(data))
//   .attr('stroke', 'blue')
//   .attr('stroke-width', 2)
//   .attr('fill', 'none');




//         $('submit').click(function(e) {
//         var yqlCallback = function(data) {
//             var wind = data.query.results.channel.wind;
//             var current_time = new Date();
//             temps.push({rec_time: 4, temp: wind.chill});
//             console.log(wind.chill);
//             console.log(data);
//           };
//         });


    </script>

    <script src="https://query.yahooapis.com/v1/public/yql?q=select wind from weather.forecast where woeid in (select woeid from geo.places(1) where text='chicago, il')&format=json&callback=yqlCallback"></script>

    <script type="text/javascript">

        // $('.button').click(function(e) {
        //   var sym;
        //   sym = $('.input-text').val();
        //   server_side_request(sym);
        //   return e.preventDefault();
        // });

    </script>
</body>

</html>
