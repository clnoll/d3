<!DOCTYPE html>
<html>

<head>
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.js"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
    <title>Noll</title>

    <style>
        body {
          font: 11px sans-serif;
        }

        .axis path,
        .axis line {
          fill: none;
          stroke: #000;
          shape-rendering: crispEdges;
        }
        .axis text{
            font-family: sans-serif;
            font-size: 9px;
        }

        .dot {
          stroke: #000;
        }

        .tooltip {
          position: absolute;
          width: 200px;
          height: 28px;
          pointer-events: none;
        }
    </style>
</head>
<div>
    <body>
        <h1><strong>Chicago Wind Chills</strong></h1>
        <div id="option">
            <input name="updateButton"
                         type="button"
                        value="Update"
                        onclick="updateData()" />
        </div>
    </body>
</div>
<body>


    <script>

      var temps = [{rec_time: 000, temp: 14}, {rec_time: 200, temp: 34}, {rec_time: 400, temp: 50}]
      var getTimes = function() {
                if (temps[temps.length-1].rec_time <=2400)
                    {return temps[temps.length-1].rec_time + 200}
                else {return 0}
                }

      var yqlCallback = function(data) {
        var wind = data.query.results.channel.wind;
        setInterval(function() { temps.push({
            rec_time: getTimes(),
            temp: wind.chill})
            console.log(temps);
        }, 3000);
      };

        var w = 500;
        var h = 200;
        var padding = 30;
        var dataset = temps;

        var svg = d3.select('body')
            .append("svg")
            .attr("width", w)
            .attr("height", h);

        var xScale = d3.scale.linear()
            .domain([0, 2400])
            .range([padding,w-padding]);

        var yScale = d3.scale.linear()
            .domain([0, 100])
            .range([h-padding, padding]);

        svg.selectAll("circle")
            .data(dataset)
            .enter()
            .append("circle")
            .attr("cx", function(d) {
                return d.rec_time;
            })
            .attr("cy", function(d) {
                return yScale(d.temp);
            })
            .attr("r", function(d) {
                return Math.sqrt(d.temp);
            })
            .style("fill", function(d) {
                var returnColor;
                if (d.temp >= 50) { returnColor = "red"; }
                else if (d.temp >= 40) { returnColor = "yellow"; }
                else if (d.temp >= 30) { returnColor = "green"; }
                else if (d.temp < 30) { returnColor = "blue"; };
                return returnColor;
            });

        d3.max(dataset, function(d) {
            return d.rec_time
        })

        var xAxis = d3.svg.axis()
            .scale(xScale)
            .ticks(6)
            .tickFormat(d3.format("t"))
            .orient("bottom");

        svg.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(0," + (h-padding) + ")")
            .call(xAxis);

        var yAxis = d3.svg.axis()
            .scale(yScale)
            .orient("left")
            .ticks(5);

        svg.append("g")
            .attr("class", "axis")
            .attr("transform", "translate(" + padding + ",0)")
            .call(yAxis)

        var refreshGraph = function() {
            svg.selectAll("circle")
                .data(dataset)
                .enter()
                .append("circle")
                .attr("cx", function(d) {
                    return xScale(d.rec_time);
                })
                .attr("cy", function(d) {
                    return yScale(d.temp);
                })
                .attr("r", function(d) {
                    return Math.sqrt(d.temp);
                })
        }

        function updateData(){
            var dataset = temps;

            var xScale = d3.scale.linear()
                .domain([0, 2400])
                .range([padding,200-padding]);

            var yScale = d3.scale.linear()
                .domain([-50, 100])
                .range([h-padding, padding]);

            svg.selectAll("circle")
                .data(dataset)
                .enter()
                .append("circle")
                .attr("cx", function(d) {
                    return xScale(d.rec_time);
                })
                .attr("cy", function(d) {
                    return yScale(d.temp);
                })
                .attr("r", function(d) {
                    return Math.sqrt(d.temp);
                })
                .style("fill", function(d) {
                    var returnColor;
                    if (d.temp >= 60) { returnColor = "red"; }
                    else if (d.temp >= 40) { returnColor = "yellow"; }
                    else if (d.temp >= 30) { returnColor = "green"; }
                    else if (d.temp < 30) { returnColor = "blue"; };
                    return returnColor;
                });
        }

    </script>

    <script src="https://query.yahooapis.com/v1/public/yql?q=select wind from weather.forecast where woeid in (select woeid from geo.places(1) where text='chicago, il')&format=json&callback=yqlCallback"></script>
<div>
    <p>
    Simple scatterplot showing wind chills in Chicago, using Yahoo's weather API.  App is set to query the API every "hour" (actually every 3 seconds for the demo purposes).
    <br>
    <br>
    User can update the scatterplot to show new data by clicking the "update" button.  Over a period of time you can see how the wind chill varies at different times of day; the color and size of the points corresponds with the temperature.
    </p>
</div>
</body>

</html>
